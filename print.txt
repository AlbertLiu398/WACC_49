.data
// length of .L.str0
    .word 12
.L.str0:
    .asciz "Hello World!"
.align 4
.text
.global main
main:
    // push {fp, lr}
    stp fp, lr, [sp, #-16]!
    mov fp, sp
    // Stack pointer unchanged, no stack allocated arguments
    adrp x8, .L.str0
    add x8, x8, :lo12:.L.str0
    // push {x8}
    stp x8, xzr, [sp, #-16]!
    // pop {x8}
    ldp x8, xzr, [sp], #16
    mov x8, x8
    mov x0, x8
    // statement primitives do not return results (but will clobber r0/rax)
    bl _prints
    mov x0, #0
    // pop {fp, lr}
    ldp fp, lr, [sp], #16
    ret

// length of .L._prints_str0
    .word 4
.L._prints_str0:
    .asciz "%.*s"
.align 4
_prints:
    // push {lr}
    stp lr, xzr, [sp, #-16]!
    mov x2, x0
    ldrsw x1, [x0, #-4]
    adr x0, .L._prints_str0
    bl printf
    mov x0, #0
    bl fflush
    // pop {lr}
    ldp lr, xzr, [sp], #16
    ret